// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;
using ImGuiID = System.UInt32;
using ImTextureID = System.IntPtr;
using ImDrawIdx = System.UInt16;
using ImGuiCol = System.Int32;
using ImGuiCond = System.Int32;
using ImGuiDir = System.Int32;
using ImGuiKey = System.Int32;
using ImGuiStyleVar = System.Int32;
using ImGuiSortDirection = System.Int32;
using ImGuiDataAuthority = System.Int32;
using ImGuiLayoutType = System.Int32;
using ImGuiMouseCursor = System.Int32;
using ImPoolIdx = System.Int32;
using ImGuiTableColumnIdx = System.SByte;
using ImGuiTableDrawChannelIdx = System.Byte;
using ImFileHandle = System.IntPtr;
using ImVec1 = System.Single;
using ImVec2 = System.Numerics.Vector2;
using ImVec3 = System.Numerics.Vector3;
using ImVec4 = System.Numerics.Vector4;
using ImColor = System.Numerics.Vector4;
using System.Runtime.CompilerServices;

namespace SharpImGUI
{
	public unsafe partial struct ImGuiViewportPtr
	{
		private unsafe ImGuiViewport* self;
		public ImGuiViewportPtr(ImGuiViewport* native) => self = native;
		public static implicit operator bool(ImGuiViewportPtr handle) => handle.self != null;
		public static implicit operator ImGuiViewportPtr(ImGuiViewport* native) => new ImGuiViewportPtr(native);
		public static implicit operator ImGuiViewport*(ImGuiViewportPtr handle) => handle.self;
		public ref ImGuiID ID => ref self->ID;
		public ref ImGuiViewportFlags Flags => ref self->Flags;
		public ref ImVec2 Pos => ref self->Pos;
		public ref ImVec2 Size => ref self->Size;
		public ref ImVec2 WorkPos => ref self->WorkPos;
		public ref ImVec2 WorkSize => ref self->WorkSize;
		public ref float DpiScale => ref self->DpiScale;
		public ref ImGuiID ParentViewportId => ref self->ParentViewportId;
		public ImDrawDataPtr DrawData => self->DrawData;
		public ref nint RendererUserData => ref self->RendererUserData;
		public ref nint PlatformUserData => ref self->PlatformUserData;
		public ref nint PlatformHandle => ref self->PlatformHandle;
		public ref nint PlatformHandleRaw => ref self->PlatformHandleRaw;
		public ref bool PlatformRequestMove => ref self->PlatformRequestMove;
		public ref bool PlatformRequestResize => ref self->PlatformRequestResize;
		public ref bool PlatformRequestClose => ref self->PlatformRequestClose;
		public static ImGuiViewportPtr ImGuiViewport() => ImGui.ImGuiViewport_ImGuiViewport();
		public void destroy() => ImGui.ImGuiViewport_destroy(self);
		public ImVec2 GetCenter() => ImGui.ImGuiViewport_GetCenter(self);
		public ImVec2 GetWorkCenter() => ImGui.ImGuiViewport_GetWorkCenter(self);
	}

	public unsafe partial struct ImDrawDataPtr
	{
		private unsafe ImDrawData* self;
		public ImDrawDataPtr(ImDrawData* native) => self = native;
		public static implicit operator bool(ImDrawDataPtr handle) => handle.self != null;
		public static implicit operator ImDrawDataPtr(ImDrawData* native) => new ImDrawDataPtr(native);
		public static implicit operator ImDrawData*(ImDrawDataPtr handle) => handle.self;
		public ref bool Valid => ref self->Valid;
		public ref int CmdListsCount => ref self->CmdListsCount;
		public ref int TotalIdxCount => ref self->TotalIdxCount;
		public ref int TotalVtxCount => ref self->TotalVtxCount;
		public ref ImDrawList** CmdLists => ref self->CmdLists;
		public ref ImVec2 DisplayPos => ref self->DisplayPos;
		public ref ImVec2 DisplaySize => ref self->DisplaySize;
		public ref ImVec2 FramebufferScale => ref self->FramebufferScale;
		public ImGuiViewportPtr OwnerViewport => self->OwnerViewport;
		public static ImDrawDataPtr ImDrawData() => ImGui.ImDrawData_ImDrawData();
		public void destroy() => ImGui.ImDrawData_destroy(self);
		public void Clear() => ImGui.ImDrawData_Clear(self);
		public void DeIndexAllBuffers() => ImGui.ImDrawData_DeIndexAllBuffers(self);
		public void ScaleClipRects(ImVec2 fb_scale) => ImGui.ImDrawData_ScaleClipRects(self, fb_scale);
	}

	public unsafe partial struct ImDrawListPtr
	{
		private unsafe ImDrawList* self;
		public ImDrawListPtr(ImDrawList* native) => self = native;
		public static implicit operator bool(ImDrawListPtr handle) => handle.self != null;
		public static implicit operator ImDrawListPtr(ImDrawList* native) => new ImDrawListPtr(native);
		public static implicit operator ImDrawList*(ImDrawListPtr handle) => handle.self;
		public ref ImVector<ImDrawCmd> CmdBuffer => ref self->CmdBuffer;
		public ref ImVector<ImDrawIdx> IdxBuffer => ref self->IdxBuffer;
		public ref ImVector<ImDrawVert> VtxBuffer => ref self->VtxBuffer;
		public ref ImDrawListFlags Flags => ref self->Flags;
		public ref uint _VtxCurrentIdx => ref self->_VtxCurrentIdx;
		public ref ImDrawListSharedData* _Data => ref self->_Data;
		public ref byte* _OwnerName => ref self->_OwnerName;
		public ref ImDrawVert* _VtxWritePtr => ref self->_VtxWritePtr;
		public ref ImDrawIdx* _IdxWritePtr => ref self->_IdxWritePtr;
		public ref ImVector<ImVec4> _ClipRectStack => ref self->_ClipRectStack;
		public ref ImVector<ImTextureID> _TextureIdStack => ref self->_TextureIdStack;
		public ref ImVector<ImVec2> _Path => ref self->_Path;
		public ref ImDrawCmdHeader _CmdHeader => ref self->_CmdHeader;
		public ref ImDrawListSplitter _Splitter => ref self->_Splitter;
		public ref float _FringeScale => ref self->_FringeScale;
		public static ImDrawListPtr ImDrawList(ImDrawListSharedData* shared_data) => ImGui.ImDrawList_ImDrawList(shared_data);
		public void destroy() => ImGui.ImDrawList_destroy(self);
		public void PushClipRect(ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect) => ImGui.ImDrawList_PushClipRect(self, clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);
		public void PushClipRectFullScreen() => ImGui.ImDrawList_PushClipRectFullScreen(self);
		public void PopClipRect() => ImGui.ImDrawList_PopClipRect(self);
		public void PushTextureID(ImTextureID texture_id) => ImGui.ImDrawList_PushTextureID(self, texture_id);
		public void PopTextureID() => ImGui.ImDrawList_PopTextureID(self);
		public ImVec2 GetClipRectMin() => ImGui.ImDrawList_GetClipRectMin(self);
		public ImVec2 GetClipRectMax() => ImGui.ImDrawList_GetClipRectMax(self);
		public void AddLine(ImVec2 p1, ImVec2 p2, uint col, float thickness) => ImGui.ImDrawList_AddLine(self, p1, p2, col, thickness);
		public void AddRect(ImVec2 p_min, ImVec2 p_max, uint col, float rounding, ImDrawFlags flags, float thickness) => ImGui.ImDrawList_AddRect(self, p_min, p_max, col, rounding, flags, thickness);
		public void AddRectFilled(ImVec2 p_min, ImVec2 p_max, uint col, float rounding, ImDrawFlags flags = 0) => ImGui.ImDrawList_AddRectFilled(self, p_min, p_max, col, rounding, flags);
		public void AddRectFilledMultiColor(ImVec2 p_min, ImVec2 p_max, uint col_upr_left, uint col_upr_right, uint col_bot_right, uint col_bot_left) => ImGui.ImDrawList_AddRectFilledMultiColor(self, p_min, p_max, col_upr_left, col_upr_right, col_bot_right, col_bot_left);
		public void AddQuad(ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, uint col, float thickness) => ImGui.ImDrawList_AddQuad(self, p1, p2, p3, p4, col, thickness);
		public void AddQuadFilled(ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, uint col) => ImGui.ImDrawList_AddQuadFilled(self, p1, p2, p3, p4, col);
		public void AddTriangle(ImVec2 p1, ImVec2 p2, ImVec2 p3, uint col, float thickness) => ImGui.ImDrawList_AddTriangle(self, p1, p2, p3, col, thickness);
		public void AddTriangleFilled(ImVec2 p1, ImVec2 p2, ImVec2 p3, uint col) => ImGui.ImDrawList_AddTriangleFilled(self, p1, p2, p3, col);
		public void AddCircle(ImVec2 center, float radius, uint col, int num_segments, float thickness) => ImGui.ImDrawList_AddCircle(self, center, radius, col, num_segments, thickness);
		public void AddCircleFilled(ImVec2 center, float radius, uint col, int num_segments) => ImGui.ImDrawList_AddCircleFilled(self, center, radius, col, num_segments);
		public void AddNgon(ImVec2 center, float radius, uint col, int num_segments, float thickness) => ImGui.ImDrawList_AddNgon(self, center, radius, col, num_segments, thickness);
		public void AddNgonFilled(ImVec2 center, float radius, uint col, int num_segments) => ImGui.ImDrawList_AddNgonFilled(self, center, radius, col, num_segments);
		public void AddTextVec2(ImVec2 pos, uint col, string text_begin, string text_end) => ImGui.ImDrawList_AddTextVec2(self, pos, col, text_begin, text_end);
		public void AddTextFontPtr(ImFontPtr font, float font_size, ImVec2 pos, uint col, string text_begin, string text_end, float wrap_width, ImVec4* cpu_fine_clip_rect) => ImGui.ImDrawList_AddTextFontPtr(self, font, font_size, pos, col, text_begin, text_end, wrap_width, cpu_fine_clip_rect);
		public void AddPolyline(ImVec2* points, int num_points, uint col, ImDrawFlags flags, float thickness) => ImGui.ImDrawList_AddPolyline(self, points, num_points, col, flags, thickness);
		public void AddConvexPolyFilled(ImVec2* points, int num_points, uint col) => ImGui.ImDrawList_AddConvexPolyFilled(self, points, num_points, col);
		public void AddBezierCubic(ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, uint col, float thickness, int num_segments) => ImGui.ImDrawList_AddBezierCubic(self, p1, p2, p3, p4, col, thickness, num_segments);
		public void AddBezierQuadratic(ImVec2 p1, ImVec2 p2, ImVec2 p3, uint col, float thickness, int num_segments) => ImGui.ImDrawList_AddBezierQuadratic(self, p1, p2, p3, col, thickness, num_segments);
		public void AddImage(ImTextureID user_texture_id, ImVec2 p_min, ImVec2 p_max, ImVec2 uv_min, ImVec2 uv_max, uint col) => ImGui.ImDrawList_AddImage(self, user_texture_id, p_min, p_max, uv_min, uv_max, col);
		public void AddImageQuad(ImTextureID user_texture_id, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImVec2 uv1, ImVec2 uv2, ImVec2 uv3, ImVec2 uv4, uint col) => ImGui.ImDrawList_AddImageQuad(self, user_texture_id, p1, p2, p3, p4, uv1, uv2, uv3, uv4, col);
		public void AddImageRounded(ImTextureID user_texture_id, ImVec2 p_min, ImVec2 p_max, ImVec2 uv_min, ImVec2 uv_max, uint col, float rounding, ImDrawFlags flags = 0) => ImGui.ImDrawList_AddImageRounded(self, user_texture_id, p_min, p_max, uv_min, uv_max, col, rounding, flags);
		public void PathClear() => ImGui.ImDrawList_PathClear(self);
		public void PathLineTo(ImVec2 pos) => ImGui.ImDrawList_PathLineTo(self, pos);
		public void PathLineToMergeDuplicate(ImVec2 pos) => ImGui.ImDrawList_PathLineToMergeDuplicate(self, pos);
		public void PathFillConvex(uint col) => ImGui.ImDrawList_PathFillConvex(self, col);
		public void PathStroke(uint col, ImDrawFlags flags, float thickness) => ImGui.ImDrawList_PathStroke(self, col, flags, thickness);
		public void PathArcTo(ImVec2 center, float radius, float a_min, float a_max, int num_segments) => ImGui.ImDrawList_PathArcTo(self, center, radius, a_min, a_max, num_segments);
		public void PathArcToFast(ImVec2 center, float radius, int a_min_of_12, int a_max_of_12) => ImGui.ImDrawList_PathArcToFast(self, center, radius, a_min_of_12, a_max_of_12);
		public void PathBezierCubicCurveTo(ImVec2 p2, ImVec2 p3, ImVec2 p4, int num_segments) => ImGui.ImDrawList_PathBezierCubicCurveTo(self, p2, p3, p4, num_segments);
		public void PathBezierQuadraticCurveTo(ImVec2 p2, ImVec2 p3, int num_segments) => ImGui.ImDrawList_PathBezierQuadraticCurveTo(self, p2, p3, num_segments);
		public void PathRect(ImVec2 rect_min, ImVec2 rect_max, float rounding, ImDrawFlags flags = 0) => ImGui.ImDrawList_PathRect(self, rect_min, rect_max, rounding, flags);
		public void AddCallback(IntPtr callback, nint callback_data) => ImGui.ImDrawList_AddCallback(self, callback, callback_data);
		public void AddDrawCmd() => ImGui.ImDrawList_AddDrawCmd(self);
		public ImDrawListPtr CloneOutput() => ImGui.ImDrawList_CloneOutput(self);
		public void ChannelsSplit(int count) => ImGui.ImDrawList_ChannelsSplit(self, count);
		public void ChannelsMerge() => ImGui.ImDrawList_ChannelsMerge(self);
		public void ChannelsSetCurrent(int n) => ImGui.ImDrawList_ChannelsSetCurrent(self, n);
		public void PrimReserve(int idx_count, int vtx_count) => ImGui.ImDrawList_PrimReserve(self, idx_count, vtx_count);
		public void PrimUnreserve(int idx_count, int vtx_count) => ImGui.ImDrawList_PrimUnreserve(self, idx_count, vtx_count);
		public void PrimRect(ImVec2 a, ImVec2 b, uint col) => ImGui.ImDrawList_PrimRect(self, a, b, col);
		public void PrimRectUV(ImVec2 a, ImVec2 b, ImVec2 uv_a, ImVec2 uv_b, uint col) => ImGui.ImDrawList_PrimRectUV(self, a, b, uv_a, uv_b, col);
		public void PrimQuadUV(ImVec2 a, ImVec2 b, ImVec2 c, ImVec2 d, ImVec2 uv_a, ImVec2 uv_b, ImVec2 uv_c, ImVec2 uv_d, uint col) => ImGui.ImDrawList_PrimQuadUV(self, a, b, c, d, uv_a, uv_b, uv_c, uv_d, col);
		public void PrimWriteVtx(ImVec2 pos, ImVec2 uv, uint col) => ImGui.ImDrawList_PrimWriteVtx(self, pos, uv, col);
		public void PrimWriteIdx(ImDrawIdx idx) => ImGui.ImDrawList_PrimWriteIdx(self, idx);
		public void PrimVtx(ImVec2 pos, ImVec2 uv, uint col) => ImGui.ImDrawList_PrimVtx(self, pos, uv, col);
	}

	public unsafe partial struct ImFontPtr
	{
		private unsafe ImFont* self;
		public ImFontPtr(ImFont* native) => self = native;
		public static implicit operator bool(ImFontPtr handle) => handle.self != null;
		public static implicit operator ImFontPtr(ImFont* native) => new ImFontPtr(native);
		public static implicit operator ImFont*(ImFontPtr handle) => handle.self;
		public ref ImVector<float> IndexAdvanceX => ref self->IndexAdvanceX;
		public ref float FallbackAdvanceX => ref self->FallbackAdvanceX;
		public ref float FontSize => ref self->FontSize;
		public ref ImVector<char> IndexLookup => ref self->IndexLookup;
		public ref ImVector<ImFontGlyph> Glyphs => ref self->Glyphs;
		public ref ImFontGlyph* FallbackGlyph => ref self->FallbackGlyph;
		public ImFontAtlasPtr ContainerAtlas => self->ContainerAtlas;
		public ImFontConfigPtr ConfigData => self->ConfigData;
		public ref short ConfigDataCount => ref self->ConfigDataCount;
		public ref char FallbackChar => ref self->FallbackChar;
		public ref char EllipsisChar => ref self->EllipsisChar;
		public ref bool DirtyLookupTables => ref self->DirtyLookupTables;
		public ref float Scale => ref self->Scale;
		public ref float Ascent => ref self->Ascent;
		public ref float Descent => ref self->Descent;
		public ref int MetricsTotalSurface => ref self->MetricsTotalSurface;
		public RangeAccessor<byte> Used4kPagesMap => (byte*)Unsafe.AsPointer(ref self->Used4kPagesMap[0]);
		public static ImFontPtr ImFont() => ImGui.ImFont_ImFont();
		public void destroy() => ImGui.ImFont_destroy(self);
		public ImFontGlyph* FindGlyph(char c) => ImGui.ImFont_FindGlyph(self, c);
		public ImFontGlyph* FindGlyphNoFallback(char c) => ImGui.ImFont_FindGlyphNoFallback(self, c);
		public float GetCharAdvance(char c) => ImGui.ImFont_GetCharAdvance(self, c);
		public bool IsLoaded() => ImGui.ImFont_IsLoaded(self);
		public byte* GetDebugName() => ImGui.ImFont_GetDebugName(self);
		public ImVec2 CalcTextSizeA(float size, float max_width, float wrap_width, string text_begin, string text_end, ref byte* remaining) => ImGui.ImFont_CalcTextSizeA(self, size, max_width, wrap_width, text_begin, text_end, ref remaining);
		public byte* CalcWordWrapPositionA(float scale, string text, string text_end, float wrap_width) => ImGui.ImFont_CalcWordWrapPositionA(self, scale, text, text_end, wrap_width);
		public void RenderChar(ImDrawListPtr draw_list, float size, ImVec2 pos, uint col, char c) => ImGui.ImFont_RenderChar(self, draw_list, size, pos, col, c);
		public void RenderText(ImDrawListPtr draw_list, float size, ImVec2 pos, uint col, ImVec4 clip_rect, string text_begin, string text_end, float wrap_width, bool cpu_fine_clip) => ImGui.ImFont_RenderText(self, draw_list, size, pos, col, clip_rect, text_begin, text_end, wrap_width, cpu_fine_clip);
		public void BuildLookupTable() => ImGui.ImFont_BuildLookupTable(self);
		public void ClearOutputData() => ImGui.ImFont_ClearOutputData(self);
		public void GrowIndex(int new_size) => ImGui.ImFont_GrowIndex(self, new_size);
		public void AddGlyph(ImFontConfigPtr src_cfg, char c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x) => ImGui.ImFont_AddGlyph(self, src_cfg, c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x);
		public void AddRemapChar(char dst, char src, bool overwrite_dst) => ImGui.ImFont_AddRemapChar(self, dst, src, overwrite_dst);
		public void SetGlyphVisible(char c, bool visible) => ImGui.ImFont_SetGlyphVisible(self, c, visible);
		public void SetFallbackChar(char c) => ImGui.ImFont_SetFallbackChar(self, c);
		public bool IsGlyphRangeUnused(uint c_begin, uint c_last) => ImGui.ImFont_IsGlyphRangeUnused(self, c_begin, c_last);
	}

	public unsafe partial struct ImFontAtlasPtr
	{
		private unsafe ImFontAtlas* self;
		public ImFontAtlasPtr(ImFontAtlas* native) => self = native;
		public static implicit operator bool(ImFontAtlasPtr handle) => handle.self != null;
		public static implicit operator ImFontAtlasPtr(ImFontAtlas* native) => new ImFontAtlasPtr(native);
		public static implicit operator ImFontAtlas*(ImFontAtlasPtr handle) => handle.self;
		public ref ImFontAtlasFlags Flags => ref self->Flags;
		public ref ImTextureID TexID => ref self->TexID;
		public ref int TexDesiredWidth => ref self->TexDesiredWidth;
		public ref int TexGlyphPadding => ref self->TexGlyphPadding;
		public ref bool Locked => ref self->Locked;
		public ref bool TexPixelsUseColors => ref self->TexPixelsUseColors;
		public ref byte* TexPixelsAlpha8 => ref self->TexPixelsAlpha8;
		public ref uint* TexPixelsRGBA32 => ref self->TexPixelsRGBA32;
		public ref int TexWidth => ref self->TexWidth;
		public ref int TexHeight => ref self->TexHeight;
		public ref ImVec2 TexUvScale => ref self->TexUvScale;
		public ref ImVec2 TexUvWhitePixel => ref self->TexUvWhitePixel;
		public ref ImVector_ImFontPtr Fonts => ref self->Fonts;
		public ref ImVector_ImFontAtlasCustomRect CustomRects => ref self->CustomRects;
		public ref ImVector_ImFontConfig ConfigData => ref self->ConfigData;
		public RangeAccessor<ImVec4> TexUvLines => (ImVec4*)Unsafe.AsPointer(ref self->TexUvLines_0);
		public ref ImFontBuilderIO* FontBuilderIO => ref self->FontBuilderIO;
		public ref uint FontBuilderFlags => ref self->FontBuilderFlags;
		public ref int PackIdMouseCursors => ref self->PackIdMouseCursors;
		public ref int PackIdLines => ref self->PackIdLines;
		public static ImFontAtlasPtr ImFontAtlas() => ImGui.ImFontAtlas_ImFontAtlas();
		public void destroy() => ImGui.ImFontAtlas_destroy(self);
		public ImFontPtr AddFont(ImFontConfigPtr font_cfg) => ImGui.ImFontAtlas_AddFont(self, font_cfg);
		public ImFontPtr AddFontDefault(ImFontConfigPtr font_cfg) => ImGui.ImFontAtlas_AddFontDefault(self, font_cfg);
		public ImFontPtr AddFontFromFileTTF(string filename, float size_pixels, ImFontConfigPtr font_cfg, char* glyph_ranges) => ImGui.ImFontAtlas_AddFontFromFileTTF(self, filename, size_pixels, font_cfg, glyph_ranges);
		public ImFontPtr AddFontFromMemoryTTF(nint font_data, int font_size, float size_pixels, ImFontConfigPtr font_cfg, char* glyph_ranges) => ImGui.ImFontAtlas_AddFontFromMemoryTTF(self, font_data, font_size, size_pixels, font_cfg, glyph_ranges);
		public ImFontPtr AddFontFromMemoryCompressedTTF(nint compressed_font_data, int compressed_font_size, float size_pixels, ImFontConfigPtr font_cfg, char* glyph_ranges) => ImGui.ImFontAtlas_AddFontFromMemoryCompressedTTF(self, compressed_font_data, compressed_font_size, size_pixels, font_cfg, glyph_ranges);
		public ImFontPtr AddFontFromMemoryCompressedBase85TTF(string compressed_font_data_base85, float size_pixels, ImFontConfigPtr font_cfg, char* glyph_ranges) => ImGui.ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(self, compressed_font_data_base85, size_pixels, font_cfg, glyph_ranges);
		public void ClearInputData() => ImGui.ImFontAtlas_ClearInputData(self);
		public void ClearTexData() => ImGui.ImFontAtlas_ClearTexData(self);
		public void ClearFonts() => ImGui.ImFontAtlas_ClearFonts(self);
		public void Clear() => ImGui.ImFontAtlas_Clear(self);
		public bool Build() => ImGui.ImFontAtlas_Build(self);
		public void GetTexDataAsAlpha8(out byte* out_pixels, out int out_width, out int out_height, out int out_bytes_per_pixel) => ImGui.ImFontAtlas_GetTexDataAsAlpha8(self, out out_pixels, out out_width, out out_height, out out_bytes_per_pixel);
		public void GetTexDataAsRGBA32(out byte* out_pixels, out int out_width, out int out_height, out int out_bytes_per_pixel) => ImGui.ImFontAtlas_GetTexDataAsRGBA32(self, out out_pixels, out out_width, out out_height, out out_bytes_per_pixel);
		public bool IsBuilt() => ImGui.ImFontAtlas_IsBuilt(self);
		public void SetTexID(ImTextureID id) => ImGui.ImFontAtlas_SetTexID(self, id);
		public char* GetGlyphRangesDefault() => ImGui.ImFontAtlas_GetGlyphRangesDefault(self);
		public char* GetGlyphRangesKorean() => ImGui.ImFontAtlas_GetGlyphRangesKorean(self);
		public char* GetGlyphRangesJapanese() => ImGui.ImFontAtlas_GetGlyphRangesJapanese(self);
		public char* GetGlyphRangesChineseFull() => ImGui.ImFontAtlas_GetGlyphRangesChineseFull(self);
		public char* GetGlyphRangesChineseSimplifiedCommon() => ImGui.ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(self);
		public char* GetGlyphRangesCyrillic() => ImGui.ImFontAtlas_GetGlyphRangesCyrillic(self);
		public char* GetGlyphRangesThai() => ImGui.ImFontAtlas_GetGlyphRangesThai(self);
		public char* GetGlyphRangesVietnamese() => ImGui.ImFontAtlas_GetGlyphRangesVietnamese(self);
		public int AddCustomRectRegular(int width, int height) => ImGui.ImFontAtlas_AddCustomRectRegular(self, width, height);
		public int AddCustomRectFontGlyph(ImFontPtr font, char id, int width, int height, float advance_x, ImVec2 offset) => ImGui.ImFontAtlas_AddCustomRectFontGlyph(self, font, id, width, height, advance_x, offset);
		public ImFontAtlasCustomRect* GetCustomRectByIndex(int index) => ImGui.ImFontAtlas_GetCustomRectByIndex(self, index);
		public void CalcCustomRectUV(ImFontAtlasCustomRect* rect, out ImVec2 out_uv_min, out ImVec2 out_uv_max) => ImGui.ImFontAtlas_CalcCustomRectUV(self, rect, out out_uv_min, out out_uv_max);
		public bool GetMouseCursorTexData(ImGuiMouseCursor cursor, out ImVec2 out_offset, out ImVec2 out_size, ImVec2* out_uv_border, ImVec2* out_uv_fill) => ImGui.ImFontAtlas_GetMouseCursorTexData(self, cursor, out out_offset, out out_size, out_uv_border, out_uv_fill);
	}

	public unsafe partial struct ImFontConfigPtr
	{
		private unsafe ImFontConfig* self;
		public ImFontConfigPtr(ImFontConfig* native) => self = native;
		public static implicit operator bool(ImFontConfigPtr handle) => handle.self != null;
		public static implicit operator ImFontConfigPtr(ImFontConfig* native) => new ImFontConfigPtr(native);
		public static implicit operator ImFontConfig*(ImFontConfigPtr handle) => handle.self;
		public ref nint FontData => ref self->FontData;
		public ref int FontDataSize => ref self->FontDataSize;
		public ref bool FontDataOwnedByAtlas => ref self->FontDataOwnedByAtlas;
		public ref int FontNo => ref self->FontNo;
		public ref float SizePixels => ref self->SizePixels;
		public ref int OversampleH => ref self->OversampleH;
		public ref int OversampleV => ref self->OversampleV;
		public ref bool PixelSnapH => ref self->PixelSnapH;
		public ref ImVec2 GlyphExtraSpacing => ref self->GlyphExtraSpacing;
		public ref ImVec2 GlyphOffset => ref self->GlyphOffset;
		public ref char* GlyphRanges => ref self->GlyphRanges;
		public ref float GlyphMinAdvanceX => ref self->GlyphMinAdvanceX;
		public ref float GlyphMaxAdvanceX => ref self->GlyphMaxAdvanceX;
		public ref bool MergeMode => ref self->MergeMode;
		public ref uint FontBuilderFlags => ref self->FontBuilderFlags;
		public ref float RasterizerMultiply => ref self->RasterizerMultiply;
		public ref char EllipsisChar => ref self->EllipsisChar;
		public RangeAccessor<byte> Name => (byte*)Unsafe.AsPointer(ref self->Name[0]);
		public ImFontPtr DstFont => self->DstFont;
		public static ImFontConfigPtr ImFontConfig() => ImGui.ImFontConfig_ImFontConfig();
		public void destroy() => ImGui.ImFontConfig_destroy(self);
	}

	public unsafe partial struct ImGuiIOPtr
	{
		private unsafe ImGuiIO* self;
		public ImGuiIOPtr(ImGuiIO* native) => self = native;
		public static implicit operator bool(ImGuiIOPtr handle) => handle.self != null;
		public static implicit operator ImGuiIOPtr(ImGuiIO* native) => new ImGuiIOPtr(native);
		public static implicit operator ImGuiIO*(ImGuiIOPtr handle) => handle.self;
		public ref ImGuiConfigFlags ConfigFlags => ref self->ConfigFlags;
		public ref ImGuiBackendFlags BackendFlags => ref self->BackendFlags;
		public ref ImVec2 DisplaySize => ref self->DisplaySize;
		public ref float DeltaTime => ref self->DeltaTime;
		public ref float IniSavingRate => ref self->IniSavingRate;
		public ref byte* IniFilename => ref self->IniFilename;
		public ref byte* LogFilename => ref self->LogFilename;
		public ref float MouseDoubleClickTime => ref self->MouseDoubleClickTime;
		public ref float MouseDoubleClickMaxDist => ref self->MouseDoubleClickMaxDist;
		public ref float MouseDragThreshold => ref self->MouseDragThreshold;
		public RangeAccessor<int> KeyMap => (int*)Unsafe.AsPointer(ref self->KeyMap[0]);
		public ref float KeyRepeatDelay => ref self->KeyRepeatDelay;
		public ref float KeyRepeatRate => ref self->KeyRepeatRate;
		public ref nint UserData => ref self->UserData;
		public ImFontAtlasPtr Fonts => self->Fonts;
		public ref float FontGlobalScale => ref self->FontGlobalScale;
		public ref bool FontAllowUserScaling => ref self->FontAllowUserScaling;
		public ImFontPtr FontDefault => self->FontDefault;
		public ref ImVec2 DisplayFramebufferScale => ref self->DisplayFramebufferScale;
		public ref bool ConfigDockingNoSplit => ref self->ConfigDockingNoSplit;
		public ref bool ConfigDockingWithShift => ref self->ConfigDockingWithShift;
		public ref bool ConfigDockingAlwaysTabBar => ref self->ConfigDockingAlwaysTabBar;
		public ref bool ConfigDockingTransparentPayload => ref self->ConfigDockingTransparentPayload;
		public ref bool ConfigViewportsNoAutoMerge => ref self->ConfigViewportsNoAutoMerge;
		public ref bool ConfigViewportsNoTaskBarIcon => ref self->ConfigViewportsNoTaskBarIcon;
		public ref bool ConfigViewportsNoDecoration => ref self->ConfigViewportsNoDecoration;
		public ref bool ConfigViewportsNoDefaultParent => ref self->ConfigViewportsNoDefaultParent;
		public ref bool MouseDrawCursor => ref self->MouseDrawCursor;
		public ref bool ConfigMacOSXBehaviors => ref self->ConfigMacOSXBehaviors;
		public ref bool ConfigInputTextCursorBlink => ref self->ConfigInputTextCursorBlink;
		public ref bool ConfigDragClickToInputText => ref self->ConfigDragClickToInputText;
		public ref bool ConfigWindowsResizeFromEdges => ref self->ConfigWindowsResizeFromEdges;
		public ref bool ConfigWindowsMoveFromTitleBarOnly => ref self->ConfigWindowsMoveFromTitleBarOnly;
		public ref float ConfigMemoryCompactTimer => ref self->ConfigMemoryCompactTimer;
		public ref byte* BackendPlatformName => ref self->BackendPlatformName;
		public ref byte* BackendRendererName => ref self->BackendRendererName;
		public ref nint BackendPlatformUserData => ref self->BackendPlatformUserData;
		public ref nint BackendRendererUserData => ref self->BackendRendererUserData;
		public ref nint BackendLanguageUserData => ref self->BackendLanguageUserData;
		public ref IntPtr GetClipboardTextFn => ref self->GetClipboardTextFn;
		public ref IntPtr SetClipboardTextFn => ref self->SetClipboardTextFn;
		public ref nint ClipboardUserData => ref self->ClipboardUserData;
		public ref ImVec2 MousePos => ref self->MousePos;
		public RangeAccessor<bool> MouseDown => (bool*)Unsafe.AsPointer(ref self->MouseDown[0]);
		public ref float MouseWheel => ref self->MouseWheel;
		public ref float MouseWheelH => ref self->MouseWheelH;
		public ref ImGuiID MouseHoveredViewport => ref self->MouseHoveredViewport;
		public ref bool KeyCtrl => ref self->KeyCtrl;
		public ref bool KeyShift => ref self->KeyShift;
		public ref bool KeyAlt => ref self->KeyAlt;
		public ref bool KeySuper => ref self->KeySuper;
		public RangeAccessor<bool> KeysDown => (bool*)Unsafe.AsPointer(ref self->KeysDown[0]);
		public RangeAccessor<float> NavInputs => (float*)Unsafe.AsPointer(ref self->NavInputs[0]);
		public ref bool WantCaptureMouse => ref self->WantCaptureMouse;
		public ref bool WantCaptureKeyboard => ref self->WantCaptureKeyboard;
		public ref bool WantTextInput => ref self->WantTextInput;
		public ref bool WantSetMousePos => ref self->WantSetMousePos;
		public ref bool WantSaveIniSettings => ref self->WantSaveIniSettings;
		public ref bool NavActive => ref self->NavActive;
		public ref bool NavVisible => ref self->NavVisible;
		public ref float Framerate => ref self->Framerate;
		public ref int MetricsRenderVertices => ref self->MetricsRenderVertices;
		public ref int MetricsRenderIndices => ref self->MetricsRenderIndices;
		public ref int MetricsRenderWindows => ref self->MetricsRenderWindows;
		public ref int MetricsActiveWindows => ref self->MetricsActiveWindows;
		public ref int MetricsActiveAllocations => ref self->MetricsActiveAllocations;
		public ref ImVec2 MouseDelta => ref self->MouseDelta;
		public ref ImGuiKeyModFlags KeyMods => ref self->KeyMods;
		public ref ImVec2 MousePosPrev => ref self->MousePosPrev;
		public RangeAccessor<ImVec2> MouseClickedPos => (ImVec2*)Unsafe.AsPointer(ref self->MouseClickedPos_0);
		public RangeAccessor<double> MouseClickedTime => (double*)Unsafe.AsPointer(ref self->MouseClickedTime[0]);
		public RangeAccessor<bool> MouseClicked => (bool*)Unsafe.AsPointer(ref self->MouseClicked[0]);
		public RangeAccessor<bool> MouseDoubleClicked => (bool*)Unsafe.AsPointer(ref self->MouseDoubleClicked[0]);
		public RangeAccessor<bool> MouseReleased => (bool*)Unsafe.AsPointer(ref self->MouseReleased[0]);
		public RangeAccessor<bool> MouseDownOwned => (bool*)Unsafe.AsPointer(ref self->MouseDownOwned[0]);
		public RangeAccessor<bool> MouseDownWasDoubleClick => (bool*)Unsafe.AsPointer(ref self->MouseDownWasDoubleClick[0]);
		public RangeAccessor<float> MouseDownDuration => (float*)Unsafe.AsPointer(ref self->MouseDownDuration[0]);
		public RangeAccessor<float> MouseDownDurationPrev => (float*)Unsafe.AsPointer(ref self->MouseDownDurationPrev[0]);
		public RangeAccessor<ImVec2> MouseDragMaxDistanceAbs => (ImVec2*)Unsafe.AsPointer(ref self->MouseDragMaxDistanceAbs_0);
		public RangeAccessor<float> MouseDragMaxDistanceSqr => (float*)Unsafe.AsPointer(ref self->MouseDragMaxDistanceSqr[0]);
		public RangeAccessor<float> KeysDownDuration => (float*)Unsafe.AsPointer(ref self->KeysDownDuration[0]);
		public RangeAccessor<float> KeysDownDurationPrev => (float*)Unsafe.AsPointer(ref self->KeysDownDurationPrev[0]);
		public RangeAccessor<float> NavInputsDownDuration => (float*)Unsafe.AsPointer(ref self->NavInputsDownDuration[0]);
		public RangeAccessor<float> NavInputsDownDurationPrev => (float*)Unsafe.AsPointer(ref self->NavInputsDownDurationPrev[0]);
		public ref float PenPressure => ref self->PenPressure;
		public ref char InputQueueSurrogate => ref self->InputQueueSurrogate;
		public ref ImVector<char> InputQueueCharacters => ref self->InputQueueCharacters;
		public void AddInputCharacter(uint c) => ImGui.ImGuiIO_AddInputCharacter(self, c);
		public void AddInputCharacterUTF16(char c) => ImGui.ImGuiIO_AddInputCharacterUTF16(self, c);
		public void AddInputCharactersUTF8(string str) => ImGui.ImGuiIO_AddInputCharactersUTF8(self, str);
		public void ClearInputCharacters() => ImGui.ImGuiIO_ClearInputCharacters(self);
		public static ImGuiIOPtr ImGuiIO() => ImGui.ImGuiIO_ImGuiIO();
		public void destroy() => ImGui.ImGuiIO_destroy(self);
	}

	public unsafe partial struct ImGuiStylePtr
	{
		private unsafe ImGuiStyle* self;
		public ImGuiStylePtr(ImGuiStyle* native) => self = native;
		public static implicit operator bool(ImGuiStylePtr handle) => handle.self != null;
		public static implicit operator ImGuiStylePtr(ImGuiStyle* native) => new ImGuiStylePtr(native);
		public static implicit operator ImGuiStyle*(ImGuiStylePtr handle) => handle.self;
		public ref float Alpha => ref self->Alpha;
		public ref ImVec2 WindowPadding => ref self->WindowPadding;
		public ref float WindowRounding => ref self->WindowRounding;
		public ref float WindowBorderSize => ref self->WindowBorderSize;
		public ref ImVec2 WindowMinSize => ref self->WindowMinSize;
		public ref ImVec2 WindowTitleAlign => ref self->WindowTitleAlign;
		public ref ImGuiDir WindowMenuButtonPosition => ref self->WindowMenuButtonPosition;
		public ref float ChildRounding => ref self->ChildRounding;
		public ref float ChildBorderSize => ref self->ChildBorderSize;
		public ref float PopupRounding => ref self->PopupRounding;
		public ref float PopupBorderSize => ref self->PopupBorderSize;
		public ref ImVec2 FramePadding => ref self->FramePadding;
		public ref float FrameRounding => ref self->FrameRounding;
		public ref float FrameBorderSize => ref self->FrameBorderSize;
		public ref ImVec2 ItemSpacing => ref self->ItemSpacing;
		public ref ImVec2 ItemInnerSpacing => ref self->ItemInnerSpacing;
		public ref ImVec2 CellPadding => ref self->CellPadding;
		public ref ImVec2 TouchExtraPadding => ref self->TouchExtraPadding;
		public ref float IndentSpacing => ref self->IndentSpacing;
		public ref float ColumnsMinSpacing => ref self->ColumnsMinSpacing;
		public ref float ScrollbarSize => ref self->ScrollbarSize;
		public ref float ScrollbarRounding => ref self->ScrollbarRounding;
		public ref float GrabMinSize => ref self->GrabMinSize;
		public ref float GrabRounding => ref self->GrabRounding;
		public ref float LogSliderDeadzone => ref self->LogSliderDeadzone;
		public ref float TabRounding => ref self->TabRounding;
		public ref float TabBorderSize => ref self->TabBorderSize;
		public ref float TabMinWidthForCloseButton => ref self->TabMinWidthForCloseButton;
		public ref ImGuiDir ColorButtonPosition => ref self->ColorButtonPosition;
		public ref ImVec2 ButtonTextAlign => ref self->ButtonTextAlign;
		public ref ImVec2 SelectableTextAlign => ref self->SelectableTextAlign;
		public ref ImVec2 DisplayWindowPadding => ref self->DisplayWindowPadding;
		public ref ImVec2 DisplaySafeAreaPadding => ref self->DisplaySafeAreaPadding;
		public ref float MouseCursorScale => ref self->MouseCursorScale;
		public ref bool AntiAliasedLines => ref self->AntiAliasedLines;
		public ref bool AntiAliasedLinesUseTex => ref self->AntiAliasedLinesUseTex;
		public ref bool AntiAliasedFill => ref self->AntiAliasedFill;
		public ref float CurveTessellationTol => ref self->CurveTessellationTol;
		public ref float CircleTessellationMaxError => ref self->CircleTessellationMaxError;
		public RangeAccessor<ImVec4> Colors => (ImVec4*)Unsafe.AsPointer(ref self->Colors_0);
		public static ImGuiStylePtr ImGuiStyle() => ImGui.ImGuiStyle_ImGuiStyle();
		public void destroy() => ImGui.ImGuiStyle_destroy(self);
		public void ScaleAllSizes(float scale_factor) => ImGui.ImGuiStyle_ScaleAllSizes(self, scale_factor);
	}

	public unsafe partial struct ImGuiPayloadPtr
	{
		private unsafe ImGuiPayload* self;
		public ImGuiPayloadPtr(ImGuiPayload* native) => self = native;
		public static implicit operator bool(ImGuiPayloadPtr handle) => handle.self != null;
		public static implicit operator ImGuiPayloadPtr(ImGuiPayload* native) => new ImGuiPayloadPtr(native);
		public static implicit operator ImGuiPayload*(ImGuiPayloadPtr handle) => handle.self;
		public ref nint Data => ref self->Data;
		public ref int DataSize => ref self->DataSize;
		public ref ImGuiID SourceId => ref self->SourceId;
		public ref ImGuiID SourceParentId => ref self->SourceParentId;
		public ref int DataFrameCount => ref self->DataFrameCount;
		public RangeAccessor<byte> DataType => (byte*)Unsafe.AsPointer(ref self->DataType[0]);
		public ref bool Preview => ref self->Preview;
		public ref bool Delivery => ref self->Delivery;
		public static ImGuiPayloadPtr ImGuiPayload() => ImGui.ImGuiPayload_ImGuiPayload();
		public void destroy() => ImGui.ImGuiPayload_destroy(self);
		public void Clear() => ImGui.ImGuiPayload_Clear(self);
		public bool IsDataType(string type) => ImGui.ImGuiPayload_IsDataType(self, type);
		public bool IsPreview() => ImGui.ImGuiPayload_IsPreview(self);
		public bool IsDelivery() => ImGui.ImGuiPayload_IsDelivery(self);
	}

}
