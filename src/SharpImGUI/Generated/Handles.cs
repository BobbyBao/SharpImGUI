// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;
using ImGuiID = System.UInt32;
using ImTextureID = System.IntPtr;
using ImDrawIdx = System.UInt16;
using ImGuiCol = System.Int32;
using ImGuiCond = System.Int32;
using ImGuiDir = System.Int32;
using ImGuiKey = System.Int32;
using ImGuiStyleVar = System.Int32;
using ImGuiSortDirection = System.Int32;
using ImGuiDataAuthority = System.Int32;
using ImGuiLayoutType = System.Int32;
using ImGuiMouseCursor = System.Int32;
using ImPoolIdx = System.Int32;
using ImGuiTableColumnIdx = System.SByte;
using ImGuiTableDrawChannelIdx = System.Byte;
using ImFileHandle = System.IntPtr;
using ImVec1 = System.Single;
using ImVec2 = System.Numerics.Vector2;
using ImVec3 = System.Numerics.Vector3;
using ImVec4 = System.Numerics.Vector4;
using ImColor = System.Numerics.Vector4;
using System.Runtime.CompilerServices;

namespace SharpImGUI
{
	public unsafe partial struct ImDrawDataPtr
	{
		private unsafe ImDrawData* self;
		public ImDrawDataPtr(ImDrawData* native)
		{
			self = (ImDrawData*)native;
		}

		public static implicit operator ImDrawDataPtr(ImDrawData* native) => new ImDrawDataPtr(native);
		public static implicit operator ImDrawData*(ImDrawDataPtr handle) => handle.self;
		public ref bool Valid => ref self->Valid;
		public ref int CmdListsCount => ref self->CmdListsCount;
		public ref int TotalIdxCount => ref self->TotalIdxCount;
		public ref int TotalVtxCount => ref self->TotalVtxCount;
		public ref ImDrawList** CmdLists => ref self->CmdLists;
		public ref ImVec2 DisplayPos => ref self->DisplayPos;
		public ref ImVec2 DisplaySize => ref self->DisplaySize;
		public ref ImVec2 FramebufferScale => ref self->FramebufferScale;
		public ref ImGuiViewport* OwnerViewport => ref self->OwnerViewport;
	}

	public unsafe partial struct ImDrawListPtr
	{
		private unsafe ImDrawList* self;
		public ImDrawListPtr(ImDrawList* native)
		{
			self = (ImDrawList*)native;
		}

		public static implicit operator ImDrawListPtr(ImDrawList* native) => new ImDrawListPtr(native);
		public static implicit operator ImDrawList*(ImDrawListPtr handle) => handle.self;
		public ref ImVector<ImDrawCmd> CmdBuffer => ref self->CmdBuffer;
		public ref ImVector<ImDrawIdx> IdxBuffer => ref self->IdxBuffer;
		public ref ImVector<ImDrawVert> VtxBuffer => ref self->VtxBuffer;
		public ref ImDrawListFlags Flags => ref self->Flags;
		public ref uint _VtxCurrentIdx => ref self->_VtxCurrentIdx;
		public ref ImDrawListSharedData* _Data => ref self->_Data;
		public ref byte* _OwnerName => ref self->_OwnerName;
		public ref ImDrawVert* _VtxWritePtr => ref self->_VtxWritePtr;
		public ref ImDrawIdx* _IdxWritePtr => ref self->_IdxWritePtr;
		public ref ImVector<ImVec4> _ClipRectStack => ref self->_ClipRectStack;
		public ref ImVector<ImTextureID> _TextureIdStack => ref self->_TextureIdStack;
		public ref ImVector<ImVec2> _Path => ref self->_Path;
		public ref ImDrawCmdHeader _CmdHeader => ref self->_CmdHeader;
		public ref ImDrawListSplitter _Splitter => ref self->_Splitter;
		public ref float _FringeScale => ref self->_FringeScale;
	}

	public unsafe partial struct ImFontPtr
	{
		private unsafe ImFont* self;
		public ImFontPtr(ImFont* native)
		{
			self = (ImFont*)native;
		}

		public static implicit operator ImFontPtr(ImFont* native) => new ImFontPtr(native);
		public static implicit operator ImFont*(ImFontPtr handle) => handle.self;
		public ref ImVector<float> IndexAdvanceX => ref self->IndexAdvanceX;
		public ref float FallbackAdvanceX => ref self->FallbackAdvanceX;
		public ref float FontSize => ref self->FontSize;
		public ref ImVector<char> IndexLookup => ref self->IndexLookup;
		public ref ImVector<ImFontGlyph> Glyphs => ref self->Glyphs;
		public ref ImFontGlyph* FallbackGlyph => ref self->FallbackGlyph;
		public ImFontAtlasPtr ContainerAtlas => self->ContainerAtlas;
		public ImFontConfigPtr ConfigData => self->ConfigData;
		public ref short ConfigDataCount => ref self->ConfigDataCount;
		public ref char FallbackChar => ref self->FallbackChar;
		public ref char EllipsisChar => ref self->EllipsisChar;
		public ref bool DirtyLookupTables => ref self->DirtyLookupTables;
		public ref float Scale => ref self->Scale;
		public ref float Ascent => ref self->Ascent;
		public ref float Descent => ref self->Descent;
		public ref int MetricsTotalSurface => ref self->MetricsTotalSurface;
		public RangeAccessor<byte> Used4kPagesMap => (byte*)Unsafe.AsPointer(ref self->Used4kPagesMap[0]);
	}

	public unsafe partial struct ImFontAtlasPtr
	{
		private unsafe ImFontAtlas* self;
		public ImFontAtlasPtr(ImFontAtlas* native)
		{
			self = (ImFontAtlas*)native;
		}

		public static implicit operator ImFontAtlasPtr(ImFontAtlas* native) => new ImFontAtlasPtr(native);
		public static implicit operator ImFontAtlas*(ImFontAtlasPtr handle) => handle.self;
		public ref ImFontAtlasFlags Flags => ref self->Flags;
		public ref ImTextureID TexID => ref self->TexID;
		public ref int TexDesiredWidth => ref self->TexDesiredWidth;
		public ref int TexGlyphPadding => ref self->TexGlyphPadding;
		public ref bool Locked => ref self->Locked;
		public ref bool TexPixelsUseColors => ref self->TexPixelsUseColors;
		public ref byte* TexPixelsAlpha8 => ref self->TexPixelsAlpha8;
		public ref uint* TexPixelsRGBA32 => ref self->TexPixelsRGBA32;
		public ref int TexWidth => ref self->TexWidth;
		public ref int TexHeight => ref self->TexHeight;
		public ref ImVec2 TexUvScale => ref self->TexUvScale;
		public ref ImVec2 TexUvWhitePixel => ref self->TexUvWhitePixel;
		public ref ImVector_ImFontPtr Fonts => ref self->Fonts;
		public ref ImVector_ImFontAtlasCustomRect CustomRects => ref self->CustomRects;
		public ref ImVector_ImFontConfig ConfigData => ref self->ConfigData;
		public RangeAccessor<ImVec4> TexUvLines => (ImVec4*)Unsafe.AsPointer(ref self->TexUvLines_0);
		public ref ImFontBuilderIO* FontBuilderIO => ref self->FontBuilderIO;
		public ref uint FontBuilderFlags => ref self->FontBuilderFlags;
		public ref int PackIdMouseCursors => ref self->PackIdMouseCursors;
		public ref int PackIdLines => ref self->PackIdLines;
	}

	public unsafe partial struct ImFontConfigPtr
	{
		private unsafe ImFontConfig* self;
		public ImFontConfigPtr(ImFontConfig* native)
		{
			self = (ImFontConfig*)native;
		}

		public static implicit operator ImFontConfigPtr(ImFontConfig* native) => new ImFontConfigPtr(native);
		public static implicit operator ImFontConfig*(ImFontConfigPtr handle) => handle.self;
		public ref void* FontData => ref self->FontData;
		public ref int FontDataSize => ref self->FontDataSize;
		public ref bool FontDataOwnedByAtlas => ref self->FontDataOwnedByAtlas;
		public ref int FontNo => ref self->FontNo;
		public ref float SizePixels => ref self->SizePixels;
		public ref int OversampleH => ref self->OversampleH;
		public ref int OversampleV => ref self->OversampleV;
		public ref bool PixelSnapH => ref self->PixelSnapH;
		public ref ImVec2 GlyphExtraSpacing => ref self->GlyphExtraSpacing;
		public ref ImVec2 GlyphOffset => ref self->GlyphOffset;
		public ref char* GlyphRanges => ref self->GlyphRanges;
		public ref float GlyphMinAdvanceX => ref self->GlyphMinAdvanceX;
		public ref float GlyphMaxAdvanceX => ref self->GlyphMaxAdvanceX;
		public ref bool MergeMode => ref self->MergeMode;
		public ref uint FontBuilderFlags => ref self->FontBuilderFlags;
		public ref float RasterizerMultiply => ref self->RasterizerMultiply;
		public ref char EllipsisChar => ref self->EllipsisChar;
		public RangeAccessor<byte> Name => (byte*)Unsafe.AsPointer(ref self->Name[0]);
		public ImFontPtr DstFont => self->DstFont;
	}

	public unsafe partial struct ImGuiIOPtr
	{
		private unsafe ImGuiIO* self;
		public ImGuiIOPtr(ImGuiIO* native)
		{
			self = (ImGuiIO*)native;
		}

		public static implicit operator ImGuiIOPtr(ImGuiIO* native) => new ImGuiIOPtr(native);
		public static implicit operator ImGuiIO*(ImGuiIOPtr handle) => handle.self;
		public ref ImGuiConfigFlags ConfigFlags => ref self->ConfigFlags;
		public ref ImGuiBackendFlags BackendFlags => ref self->BackendFlags;
		public ref ImVec2 DisplaySize => ref self->DisplaySize;
		public ref float DeltaTime => ref self->DeltaTime;
		public ref float IniSavingRate => ref self->IniSavingRate;
		public ref byte* IniFilename => ref self->IniFilename;
		public ref byte* LogFilename => ref self->LogFilename;
		public ref float MouseDoubleClickTime => ref self->MouseDoubleClickTime;
		public ref float MouseDoubleClickMaxDist => ref self->MouseDoubleClickMaxDist;
		public ref float MouseDragThreshold => ref self->MouseDragThreshold;
		public RangeAccessor<int> KeyMap => (int*)Unsafe.AsPointer(ref self->KeyMap[0]);
		public ref float KeyRepeatDelay => ref self->KeyRepeatDelay;
		public ref float KeyRepeatRate => ref self->KeyRepeatRate;
		public ref void* UserData => ref self->UserData;
		public ImFontAtlasPtr Fonts => self->Fonts;
		public ref float FontGlobalScale => ref self->FontGlobalScale;
		public ref bool FontAllowUserScaling => ref self->FontAllowUserScaling;
		public ImFontPtr FontDefault => self->FontDefault;
		public ref ImVec2 DisplayFramebufferScale => ref self->DisplayFramebufferScale;
		public ref bool ConfigDockingNoSplit => ref self->ConfigDockingNoSplit;
		public ref bool ConfigDockingWithShift => ref self->ConfigDockingWithShift;
		public ref bool ConfigDockingAlwaysTabBar => ref self->ConfigDockingAlwaysTabBar;
		public ref bool ConfigDockingTransparentPayload => ref self->ConfigDockingTransparentPayload;
		public ref bool ConfigViewportsNoAutoMerge => ref self->ConfigViewportsNoAutoMerge;
		public ref bool ConfigViewportsNoTaskBarIcon => ref self->ConfigViewportsNoTaskBarIcon;
		public ref bool ConfigViewportsNoDecoration => ref self->ConfigViewportsNoDecoration;
		public ref bool ConfigViewportsNoDefaultParent => ref self->ConfigViewportsNoDefaultParent;
		public ref bool MouseDrawCursor => ref self->MouseDrawCursor;
		public ref bool ConfigMacOSXBehaviors => ref self->ConfigMacOSXBehaviors;
		public ref bool ConfigInputTextCursorBlink => ref self->ConfigInputTextCursorBlink;
		public ref bool ConfigDragClickToInputText => ref self->ConfigDragClickToInputText;
		public ref bool ConfigWindowsResizeFromEdges => ref self->ConfigWindowsResizeFromEdges;
		public ref bool ConfigWindowsMoveFromTitleBarOnly => ref self->ConfigWindowsMoveFromTitleBarOnly;
		public ref float ConfigMemoryCompactTimer => ref self->ConfigMemoryCompactTimer;
		public ref byte* BackendPlatformName => ref self->BackendPlatformName;
		public ref byte* BackendRendererName => ref self->BackendRendererName;
		public ref void* BackendPlatformUserData => ref self->BackendPlatformUserData;
		public ref void* BackendRendererUserData => ref self->BackendRendererUserData;
		public ref void* BackendLanguageUserData => ref self->BackendLanguageUserData;
		public ref IntPtr GetClipboardTextFn => ref self->GetClipboardTextFn;
		public ref IntPtr SetClipboardTextFn => ref self->SetClipboardTextFn;
		public ref void* ClipboardUserData => ref self->ClipboardUserData;
		public ref ImVec2 MousePos => ref self->MousePos;
		public RangeAccessor<bool> MouseDown => (bool*)Unsafe.AsPointer(ref self->MouseDown[0]);
		public ref float MouseWheel => ref self->MouseWheel;
		public ref float MouseWheelH => ref self->MouseWheelH;
		public ref ImGuiID MouseHoveredViewport => ref self->MouseHoveredViewport;
		public ref bool KeyCtrl => ref self->KeyCtrl;
		public ref bool KeyShift => ref self->KeyShift;
		public ref bool KeyAlt => ref self->KeyAlt;
		public ref bool KeySuper => ref self->KeySuper;
		public RangeAccessor<bool> KeysDown => (bool*)Unsafe.AsPointer(ref self->KeysDown[0]);
		public RangeAccessor<float> NavInputs => (float*)Unsafe.AsPointer(ref self->NavInputs[0]);
		public ref bool WantCaptureMouse => ref self->WantCaptureMouse;
		public ref bool WantCaptureKeyboard => ref self->WantCaptureKeyboard;
		public ref bool WantTextInput => ref self->WantTextInput;
		public ref bool WantSetMousePos => ref self->WantSetMousePos;
		public ref bool WantSaveIniSettings => ref self->WantSaveIniSettings;
		public ref bool NavActive => ref self->NavActive;
		public ref bool NavVisible => ref self->NavVisible;
		public ref float Framerate => ref self->Framerate;
		public ref int MetricsRenderVertices => ref self->MetricsRenderVertices;
		public ref int MetricsRenderIndices => ref self->MetricsRenderIndices;
		public ref int MetricsRenderWindows => ref self->MetricsRenderWindows;
		public ref int MetricsActiveWindows => ref self->MetricsActiveWindows;
		public ref int MetricsActiveAllocations => ref self->MetricsActiveAllocations;
		public ref ImVec2 MouseDelta => ref self->MouseDelta;
		public ref ImGuiKeyModFlags KeyMods => ref self->KeyMods;
		public ref ImVec2 MousePosPrev => ref self->MousePosPrev;
		public RangeAccessor<ImVec2> MouseClickedPos => (ImVec2*)Unsafe.AsPointer(ref self->MouseClickedPos_0);
		public RangeAccessor<double> MouseClickedTime => (double*)Unsafe.AsPointer(ref self->MouseClickedTime[0]);
		public RangeAccessor<bool> MouseClicked => (bool*)Unsafe.AsPointer(ref self->MouseClicked[0]);
		public RangeAccessor<bool> MouseDoubleClicked => (bool*)Unsafe.AsPointer(ref self->MouseDoubleClicked[0]);
		public RangeAccessor<bool> MouseReleased => (bool*)Unsafe.AsPointer(ref self->MouseReleased[0]);
		public RangeAccessor<bool> MouseDownOwned => (bool*)Unsafe.AsPointer(ref self->MouseDownOwned[0]);
		public RangeAccessor<bool> MouseDownWasDoubleClick => (bool*)Unsafe.AsPointer(ref self->MouseDownWasDoubleClick[0]);
		public RangeAccessor<float> MouseDownDuration => (float*)Unsafe.AsPointer(ref self->MouseDownDuration[0]);
		public RangeAccessor<float> MouseDownDurationPrev => (float*)Unsafe.AsPointer(ref self->MouseDownDurationPrev[0]);
		public RangeAccessor<ImVec2> MouseDragMaxDistanceAbs => (ImVec2*)Unsafe.AsPointer(ref self->MouseDragMaxDistanceAbs_0);
		public RangeAccessor<float> MouseDragMaxDistanceSqr => (float*)Unsafe.AsPointer(ref self->MouseDragMaxDistanceSqr[0]);
		public RangeAccessor<float> KeysDownDuration => (float*)Unsafe.AsPointer(ref self->KeysDownDuration[0]);
		public RangeAccessor<float> KeysDownDurationPrev => (float*)Unsafe.AsPointer(ref self->KeysDownDurationPrev[0]);
		public RangeAccessor<float> NavInputsDownDuration => (float*)Unsafe.AsPointer(ref self->NavInputsDownDuration[0]);
		public RangeAccessor<float> NavInputsDownDurationPrev => (float*)Unsafe.AsPointer(ref self->NavInputsDownDurationPrev[0]);
		public ref float PenPressure => ref self->PenPressure;
		public ref char InputQueueSurrogate => ref self->InputQueueSurrogate;
		public ref ImVector<char> InputQueueCharacters => ref self->InputQueueCharacters;
	}

	public unsafe partial struct ImGuiStylePtr
	{
		private unsafe ImGuiStyle* self;
		public ImGuiStylePtr(ImGuiStyle* native)
		{
			self = (ImGuiStyle*)native;
		}

		public static implicit operator ImGuiStylePtr(ImGuiStyle* native) => new ImGuiStylePtr(native);
		public static implicit operator ImGuiStyle*(ImGuiStylePtr handle) => handle.self;
		public ref float Alpha => ref self->Alpha;
		public ref ImVec2 WindowPadding => ref self->WindowPadding;
		public ref float WindowRounding => ref self->WindowRounding;
		public ref float WindowBorderSize => ref self->WindowBorderSize;
		public ref ImVec2 WindowMinSize => ref self->WindowMinSize;
		public ref ImVec2 WindowTitleAlign => ref self->WindowTitleAlign;
		public ref ImGuiDir WindowMenuButtonPosition => ref self->WindowMenuButtonPosition;
		public ref float ChildRounding => ref self->ChildRounding;
		public ref float ChildBorderSize => ref self->ChildBorderSize;
		public ref float PopupRounding => ref self->PopupRounding;
		public ref float PopupBorderSize => ref self->PopupBorderSize;
		public ref ImVec2 FramePadding => ref self->FramePadding;
		public ref float FrameRounding => ref self->FrameRounding;
		public ref float FrameBorderSize => ref self->FrameBorderSize;
		public ref ImVec2 ItemSpacing => ref self->ItemSpacing;
		public ref ImVec2 ItemInnerSpacing => ref self->ItemInnerSpacing;
		public ref ImVec2 CellPadding => ref self->CellPadding;
		public ref ImVec2 TouchExtraPadding => ref self->TouchExtraPadding;
		public ref float IndentSpacing => ref self->IndentSpacing;
		public ref float ColumnsMinSpacing => ref self->ColumnsMinSpacing;
		public ref float ScrollbarSize => ref self->ScrollbarSize;
		public ref float ScrollbarRounding => ref self->ScrollbarRounding;
		public ref float GrabMinSize => ref self->GrabMinSize;
		public ref float GrabRounding => ref self->GrabRounding;
		public ref float LogSliderDeadzone => ref self->LogSliderDeadzone;
		public ref float TabRounding => ref self->TabRounding;
		public ref float TabBorderSize => ref self->TabBorderSize;
		public ref float TabMinWidthForCloseButton => ref self->TabMinWidthForCloseButton;
		public ref ImGuiDir ColorButtonPosition => ref self->ColorButtonPosition;
		public ref ImVec2 ButtonTextAlign => ref self->ButtonTextAlign;
		public ref ImVec2 SelectableTextAlign => ref self->SelectableTextAlign;
		public ref ImVec2 DisplayWindowPadding => ref self->DisplayWindowPadding;
		public ref ImVec2 DisplaySafeAreaPadding => ref self->DisplaySafeAreaPadding;
		public ref float MouseCursorScale => ref self->MouseCursorScale;
		public ref bool AntiAliasedLines => ref self->AntiAliasedLines;
		public ref bool AntiAliasedLinesUseTex => ref self->AntiAliasedLinesUseTex;
		public ref bool AntiAliasedFill => ref self->AntiAliasedFill;
		public ref float CurveTessellationTol => ref self->CurveTessellationTol;
		public ref float CircleTessellationMaxError => ref self->CircleTessellationMaxError;
		public RangeAccessor<ImVec4> Colors => (ImVec4*)Unsafe.AsPointer(ref self->Colors_0);
	}

}
